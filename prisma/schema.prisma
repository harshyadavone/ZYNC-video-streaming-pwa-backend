generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CREATOR
  VIEWER
}

enum Privacy {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum ContentCategory {
  EDUCATION
  ENTERTAINMENT
  MUSIC
  NEWS
  TECHNOLOGY
}

enum CommentStatus {
  APPROVED
  PENDING
  REJECTED
}

enum BookmarkStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum NotificationType {
  NEW_UPLOAD
  COMMENT
  LIKE
  SUBSCRIPTION
}

enum NotificationStatus {
  READ
  UNREAD
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  username          String?            @unique
  role              Role               @default(VIEWER)
  avatar            String?
  bio               String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          UserStatus         @default(ACTIVE)
  verified          Boolean            @default(false)
  videoLike         VideoLike[]
  videoDislike      VideoDislike[]
  channels          Channel[]
  interests         UserInterest[]
  viewedVideos      ViewedVideo[]
  CommentReaction   CommentReaction[]
  videos            Video[]
  playlists         Playlist[]
  bookmarks         Bookmark[]
  comments          Comment[]
  notifications     Notification[]
  subscriptions     Subscription[]
  watchHistory      WatchHistory[]
  verificationCodes VerificationCode[]
  sessions          Session[]
  pollVotes         PollVote[]
  poll              Poll[]
}

model Channel {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String?
  slug                String   @unique
  bannerImage         String?
  channelProfileImage String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  owner               User     @relation(fields: [ownerId], references: [id])
  ownerId             Int
  videos      Video[]
  subscribers Subscription[]
  analytics   ChannelAnalytics?
  playlists   Playlist[]
}

model Video {
  id            Int             @id @default(autoincrement())
  title         String
  videoUrl      String
  description   String?
  thumbnail     String
  duration      Float?
  privacy       Privacy
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  views         Int             @default(0)
  likes         Int             @default(0)
  dislikes      Int             @default(0)
  commentsCount Int             @default(0)
  category      ContentCategory
  viewedBy      ViewedVideo[]
  tags          String[]
  channel       Channel         @relation(fields: [channelId], references: [id])
  channelId     Int
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       Int
  comments      Comment[]
  bookmarks     Bookmark[]
  watchHistory  WatchHistory[]
  videoLike     VideoLike[]
  videoDislike  VideoDislike[]
  polls         Poll[]
  playlists     Playlist[]      @relation("PlaylistToVideo")
}

model VideoLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   Int
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
}

model VideoDislike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   Int
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
}

model Comment {
  id        Int               @id @default(autoincrement())
  content   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  likes     Int               @default(0)
  dislikes  Int               @default(0)
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video             @relation(fields: [videoId], references: [id])
  parentId  Int?
  parent    Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]         @relation("CommentReplies")
  reactions CommentReaction[]
  replyToUsername String?
}

model CommentReaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment      @relation(fields: [commentId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, commentId])
}

enum ReactionType {
  LIKE
  DISLIKE
}

model ViewedVideo {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  video    Video    @relation(fields: [videoId], references: [id])
  videoId  Int
  viewedAt DateTime @default(now())

  @@unique([userId, videoId])
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  privacy     Privacy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  channel     Channel? @relation(fields: [channelId], references: [id]) // ? optional
  channelId   Int? // ?  optional
  videos      Video[]  @relation("PlaylistToVideo")
}

model Bookmark {
  id        Int            @id @default(autoincrement())
  time      Int
  status    BookmarkStatus @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  video     Video          @relation(fields: [videoId], references: [id])
  videoId   Int

  @@unique([userId, videoId])
}

// model VideoCategory {
//   id            Int            @id @default(autoincrement())
//   name          String         @unique
//   description   String?
//   videos        Video[]
//   userInterests UserInterest[]
// }

model UserInterest {
  id            Int   @id @default(autoincrement())
  user          User  @relation(fields: [userId], references: [id])
  userId        Int
  // category      VideoCategory @relation(fields: [categoryId], references: [id])
  // categoryId    Int
  interestLevel Float @default(0)

  // @@unique([userId, categoryId])
}

model WatchHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  videoId   Int
  progress  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}


model Poll {
  id        Int          @id @default(autoincrement())
  question  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  video     Video?       @relation(fields: [videoId], references: [id])
  videoId   Int?
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id        Int        @id @default(autoincrement())
  text      String
  createdAt DateTime   @default(now())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    Int
  votes     PollVote[]
}

model PollVote {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  option    PollOption @relation(fields: [optionId], references: [id])
  optionId  Int
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    Int
}

model Notification {
  id        Int                @id @default(autoincrement())
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  message   String
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
}

model Subscription {
  id           Int                @id @default(autoincrement())
  status       SubscriptionStatus @default(ACTIVE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  subscriber   User               @relation(fields: [subscriberId], references: [id])
  subscriberId Int
  channel      Channel            @relation(fields: [channelId], references: [id])
  channelId    Int
}

model ChannelAnalytics {
  id        Int     @id @default(autoincrement())
  views     Int     @default(0)
  likes     Int     @default(0)
  dislikes  Int     @default(0)
  comments  Int     @default(0)
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int     @unique
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
